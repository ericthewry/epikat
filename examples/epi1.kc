world = heads + tails

assert (~(heads&tails))&(heads+tails)

action public_announce_heads = test heads;id;test heads
action public_announce_tails = test tails;id;test tails

action alice_peek_heads  = test heads;id;test heads
action alice_peek_tails  = test tails;id;test tails

action bobby_peek_heads  = test heads;id;test heads
action bobby_peek_tails  = test tails;id;test tails

agent alice =
  (public_announce_heads -> public_announce_heads)
  (public_announce_tails -> public_announce_tails)
  (alice_peek_heads -> alice_peek_heads)
  (alice_peek_tails -> alice_peek_tails)
  (bobby_peek_heads -> bobby_peek_heads + bobby_peek_tails)
  (bobby_peek_tails -> bobby_peek_heads + bobby_peek_tails)

agent bobby =
  (public_announce_heads -> public_announce_heads)
  (public_announce_tails -> public_announce_tails)
  (alice_peek_heads -> alice_peek_heads + alice_peek_tails)
  (alice_peek_tails -> alice_peek_tails + alice_peek_tails)
  (bobby_peek_heads -> bobby_peek_heads)
  (bobby_peek_tails -> bobby_peek_tails)

-- The relations above are equivalence relations, so the
-- order in which they are presented does not matter.
-- Below alice(X) is glossed as a diamond modality.

-- The results indicate that this logic is wrong for the box modality and
-- complex complements.

-- Worlds where the world public_announce_heads is a possibility for Alice.
-- There is just one.
query Epi1ah = alice(public_announce_heads)

-- Worlds where the world public_announce_tails is a possibility for Alice.
query Epi1at = alice(public_announce_tails)

-- Worlds where alice_peek_heads is a possibility for Alice.
-- There is just one possibility, because there are no other actions
-- that generate this option for alice.
query aa_peek = alice(alice_peek_heads)

-- Worlds where public_announce_tails is a possibility for Alice.
-- It should be bobby_peek_heads + bobby_peek_tails.
query ab_peek = alice(bobby_peek_heads)

-- All of the above make sense if bobby is a diamond modality.
-- Now test the box modality.

-- Worlds where every alternative for alice is alice_peek_heads,
-- i.e. alice_peek_heads is the sole alternative for alice.
query a_box_a_peek = ~alice(~alice_peek_heads)

-- Worlds where every alternative for alice is bobby_peek_heads,
-- i.e. bobby_peek_heads is the sole alternative for alice.
-- This should be null. There is no way for alice to get this
-- information in one step.
query a_box_a_peek = ~alice(~bobby_peek_heads)

-- Worlds where every alternative for alice is of the form  (bobby_peek_heads ; public_announce_heads)
-- This lets Alice learn that it is heads in the second event.
-- This does not work. Is it because the image vs pre-image logic is wrong?
query a_box_a_peek_concat_pah1 = ~alice(~(bobby_peek_heads ; public_announce_heads))

-- Worlds where some alternative for alice is (bobby_peek_heads ; public_announce_heads)
-- The result is the unit set of the complement.
query a_box_a_peek_concat_pah2 = alice((bobby_peek_heads ; public_announce_heads))

-- Worlds where some alternative for alice is in (bobby_peek_heads ; public_announce_heads + public_announce_tails)
-- happens.
-- Or worlds that result for alice when something in (bobby_peek_heads ; public_announce_heads + public_announce_tails)
-- happens.
-- There are two results.
--	((heads~tails)).bobby_peek_heads.((heads~tails)).public_announce_heads.((heads~tails))
--	((~headstails)).bobby_peek_tails.((~headstails)).public_announce_tails.((~headstails))
query a_box_a_peek_concat_pah3 = alice((bobby_peek_heads ; public_announce_heads + public_announce_tails))




















